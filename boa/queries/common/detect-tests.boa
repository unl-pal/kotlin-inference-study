o: output set[project: string] of string;

{@escape@}

testlibs := {
    # Java or Kotlin
    `^org\.junit\.`,
    `^org\.scalatest\.`,
    `^org\.testng\.`,
    `^org\.springframework\.test\.`,
    `^org\.springframework\.mock\.`,
    `^org\.hamcrest\.`,
    `^org\.scalacheck\.`,
    `^org\.mockito\.`,
    `^org\.easymock\.`,
    `^org\.powermock\.`,
    `^com\.github.tomakehurst\.`,
    `^org\.easymock\.`,
    `^org\.jmock\.`,
    `^org\.jmockit\.`,
    # Kotlin Specific
    `^kotlin\.test\.`,
    `^io\.mockk\.`,
    `^org\.spekframework\.`,
    `^com\.natpryce\.hamkrest\.`,
    `^io\.kotest\.`,
    `^io\.strikt\.`,
    `^org\.amshove\.kluent\.`,
    `^com\.winterbe\.expekt\.`,
    `^assertk\.`
};

{@project-filter@}
visit(input, visitor {
        before node: CodeRepository -> {
            snapshot := getsnapshot(node, "{@file-selector@}");
            foreach (i: int; def(snapshot[i]))
                visit(snapshot[i]);
            stop;
        }
        before cf: ChangedFile -> {
            if (match(`\btest(ing|s)?\b|(test.kts?$)`, lowercase(cf.name))) {
                  o[input.id] << escape(cf.name);
                  stop;
               }
        }
        before n: Namespace -> {
            istest := false;
            foreach (j: int; !istest && def(testlibs[j]))
                exists (i: int; match(testlibs[j], n.imports[i]))
                    istest = true;
            if (istest)
	        o[input.id] << escape(current(ChangedFile).name);
        }
});
