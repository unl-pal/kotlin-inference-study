o: output sum[project: string][filepath: string][class: string][nonvardecltype: string][methodreturntype: string] of int;

{@escape@}

fqn : string;
file : string;
namestack: stack of string;
types : map[string] of string;

{@project-filter@}
{
    visit(input, visitor {
        before node: CodeRepository -> {
            snapshot := getsnapshot(node, "SOURCE_KOTLIN_1_");
            foreach (i: int; def(snapshot[i]))
                visit(snapshot[i]);
            stop;
        }
        before node: Namespace -> {
            push(namestack, node.name);
            foreach(i: int; def(node.declarations[i]))
                visit(node.declarations[i]);
        }
        after node: Namespace -> pop(namestack);
        before node: Declaration -> {
            push(namestack, node.name);
            fqn = join(".", namestack);
            file = current(ChangedFile).name;
            types[fqn] = string(node.kind);
            decltype := string(node.kind);
            o[input.id][escape(file)][fqn][decltype]["none"] << 1;
        }
        after node: Declaration -> pop(namestack);
        before node: Method -> {
            push(namestack, node.name);
            fqn = join(".", namestack);
            file = current(ChangedFile).name;
            returntype := "unknown";
            if (node.return_type.name != "")
                returntype = node.return_type.name;
            o[input.id][escape(file)][fqn]["none"][returntype] << 1;
        }
        after node: Method -> pop(namestack);
    });
}