m: output sum[project: string][filepath: string][class: string][is_inferred: bool][expkind: string] of int;

{@escape@}

{@get-method-signature@}

name_stack: stack of string;

{@project-filter@}
{
    visit(input, visitor {
        before node: CodeRepository -> {
            snapshot := getsnapshot(node, "SOURCE_KOTLIN_1_");
            foreach (i: int; def(snapshot[i]))
                visit(snapshot[i]);
            stop;
        }

        before node: Namespace -> push(name_stack, node.name);
        after Namespace -> pop(name_stack);

        before node: Declaration -> {
            push(name_stack, node.name);
            foreach (i: int; def(node.methods[i]))
                visit(node.methods[i]);
            foreach (i: int; def(node.nested_declarations[i]))
                visit(node.nested_declarations[i]);
            pop(name_stack);
            stop;
        }

        before node: Method -> push(name_stack, getMethodSignature("", "", node));
        after Method -> pop(name_stack);

        before node: Variable -> {
            if (!has_modifier(node, ModifierKind.IMPLICIT)) {
                push(name_stack, node.name);

                filepath := current(ChangedFile).name;
                fqn := join(".", name_stack);
                isinferred := !def(node.variable_type);
                rhskind := "??";
                if (def(node.initializer))
                    rhskind = string(node.initializer.kind);

                m[input.project_url][escape(filepath)][fqn][isinferred][rhskind] << 1;

                pop(name_stack);
            }
        }
    });
}