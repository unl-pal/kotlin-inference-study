m: output sum[project: string][filepath: string][class: string][is_inferred: bool][expkind: string] of int;

{@escape@}

{@get-method-signature@}

name_stack: stack of string;

{@project-filter@}
{
    visit(input, visitor {
        before node: CodeRepository -> {
            snapshot := getsnapshot(node, "SOURCE_KOTLIN_1_");
            foreach (i: int; def(snapshot[i]))
                visit(snapshot[i]);
            stop;
        }

        before node: Namespace -> push(name_stack, node.name);
        before node: Declaration -> push(name_stack, node.name);
        after Namespace, Declaration -> pop(name_stack);

        before node: Method -> push(name_stack, getMethodSignature("", "", node));
        after node: Method -> pop(name_stack);

        before node: Variable -> {
            push(name_stack, node.name);

            filepath := current(ChangedFile).name;
            fqn := join(".", name_stack);
            isinferred := !def(node.variable_type);
            expkind := "??";
            if (def(node.initializer))
                expkind = string(node.initializer.kind);

            m[input.id][escape(filepath)][escape(fqn)][isinferred][expkind] << 1;
        }
        after node: Variable -> pop(name_stack);
    });
}